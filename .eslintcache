[{"D:\\Projects\\code\\attendanceSystem\\src\\index.tsx":"1","D:\\Projects\\code\\attendanceSystem\\src\\reportWebVitals.ts":"2","D:\\Projects\\code\\attendanceSystem\\src\\App.tsx":"3","D:\\Projects\\code\\attendanceSystem\\src\\pages\\authenticationPage\\AuthenticationPage.tsx":"4","D:\\Projects\\code\\attendanceSystem\\src\\components\\forms\\loginForm\\LoginForm.tsx":"5","D:\\Projects\\code\\attendanceSystem\\src\\contexts\\AuthContext.ts":"6","D:\\Projects\\code\\attendanceSystem\\src\\pages\\mainPage\\MainPage.tsx":"7","D:\\Projects\\code\\attendanceSystem\\src\\components\\forms\\authForm\\AuthForm.tsx":"8","D:\\Projects\\code\\attendanceSystem\\src\\pages\\detailsPage\\DetailsPage.tsx":"9"},{"size":542,"mtime":1607429374336,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":7864,"mtime":1607583193223,"results":"13","hashOfConfig":"11"},{"size":756,"mtime":1607523729291,"results":"14","hashOfConfig":"11"},{"size":487,"mtime":1607317353356,"results":"15","hashOfConfig":"11"},{"size":615,"mtime":1607411409285,"results":"16","hashOfConfig":"11"},{"size":4266,"mtime":1607583336036,"results":"17","hashOfConfig":"11"},{"size":3172,"mtime":1607583101521,"results":"18","hashOfConfig":"11"},{"size":6678,"mtime":1607536826473,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"16rfo4g",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"D:\\Projects\\code\\attendanceSystem\\src\\index.tsx",[],["42","43"],"D:\\Projects\\code\\attendanceSystem\\src\\reportWebVitals.ts",[],"D:\\Projects\\code\\attendanceSystem\\src\\App.tsx",["44"],"D:\\Projects\\code\\attendanceSystem\\src\\pages\\authenticationPage\\AuthenticationPage.tsx",[],"D:\\Projects\\code\\attendanceSystem\\src\\components\\forms\\loginForm\\LoginForm.tsx",[],["45","46"],"D:\\Projects\\code\\attendanceSystem\\src\\contexts\\AuthContext.ts",[],"D:\\Projects\\code\\attendanceSystem\\src\\pages\\mainPage\\MainPage.tsx",["47","48","49","50","51"],"D:\\Projects\\code\\attendanceSystem\\src\\components\\forms\\authForm\\AuthForm.tsx",["52"],"import React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { AuthContext } from \"contexts/AuthContext\";\r\nimport { Redirect } from \"react-router-dom\";\r\n//styles\r\nimport styles from \"./AuthForm.module.scss\";\r\n//constants\r\nenum InputTypes {\r\n  Name = \"Name\",\r\n  PhoneNumber = \"Phone number\",\r\n}\r\nexport enum AuthenticationConstants {\r\n  AuthenticatedUser = \"AuthenticatedUser\",\r\n  SignUp = \"SignUp\",\r\n  LogIn = \"LogIn\",\r\n}\r\ntype FormTypes = AuthenticationConstants.SignUp | AuthenticationConstants.LogIn;\r\ninterface FormInterface {\r\n  type: FormTypes;\r\n}\r\nconst SignUpForm = ({ type }: FormInterface) => {\r\n  //context\r\n  const {\r\n    currentUser,\r\n    setIsAuthenticated,\r\n    isAuthenticated,\r\n    signUpTheUser,\r\n  } = useContext(AuthContext);\r\n  //state\r\n  const [name, setName] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  //event handlers\r\n  const onSubmit = useCallback(\r\n    (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n\r\n      if (type === AuthenticationConstants.SignUp) {\r\n        signUpTheUser({ name, phoneNumber });\r\n      } else {\r\n        if (phoneNumber === currentUser.phoneNumber) {\r\n          setIsAuthenticated(true);\r\n        } else {\r\n          alert(\"Invalid credentials\");\r\n        }\r\n      }\r\n    },\r\n    [name, phoneNumber, setIsAuthenticated, currentUser, type, signUpTheUser]\r\n  );\r\n\r\n  const onInputChange = useCallback((label, e: any) => {\r\n    const { value } = e.target;\r\n    switch (label) {\r\n      case InputTypes.Name: {\r\n        setName(value);\r\n        break;\r\n      }\r\n      case InputTypes.PhoneNumber: {\r\n        setPhoneNumber(value);\r\n        break;\r\n      }\r\n      default: {\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return isAuthenticated ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <>\r\n      <form onSubmit={onSubmit} className={styles.form}>\r\n        {type === AuthenticationConstants.SignUp ? (\r\n          <>\r\n            <h2>ثبت نام</h2>\r\n            <TextField\r\n              autoFocus\r\n              required\r\n              id=\"standard-required\"\r\n              label={\"نام\"}\r\n              value={name}\r\n              onChange={onInputChange.bind(null, InputTypes.Name)}\r\n              type=\"text\"\r\n            />\r\n            <TextField\r\n              required\r\n              id=\"standard-required\"\r\n              label={\"شماره تلفن\"}\r\n              type=\"number\"\r\n              value={phoneNumber}\r\n              onChange={onInputChange.bind(null, InputTypes.PhoneNumber)}\r\n            />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <h2>ورود</h2>\r\n            <TextField\r\n              required\r\n              id=\"standard-required\"\r\n              label={\"شماره تلفن\"}\r\n              type=\"number\"\r\n              value={phoneNumber}\r\n              autoFocus\r\n              onChange={onInputChange.bind(null, InputTypes.PhoneNumber)}\r\n            />\r\n          </>\r\n        )}\r\n\r\n        <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n          {type}\r\n        </Button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;\r\n","D:\\Projects\\code\\attendanceSystem\\src\\pages\\detailsPage\\DetailsPage.tsx",["53"],"import { AuthContext } from \"contexts/AuthContext\";\r\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { WorkTypes } from \"pages/mainPage/MainPage\";\r\n//styles\r\nimport styles from \"./DetailsPage.module.scss\";\r\nimport {\r\n  Select,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport { InputLabel, TextField } from \"@material-ui/core\";\r\nimport { MenuItem } from \"@material-ui/core\";\r\nconst DetailsPage = () => {\r\n  //context\r\n  const {\r\n    isAuthenticated,\r\n    currentUser: { activityLog },\r\n  } = useContext(AuthContext);\r\n  //state\r\n  const [searchInput, setSearchInput] = useState<string>(\"\");\r\n  const [workTypeFilter, setWorkTypeFilter] = useState<WorkTypes>(\r\n    WorkTypes.All\r\n  );\r\n  const [currentWorkDuration, setCurrentWorkDuration] = useState<string>(\"\");\r\n  //callbacks\r\n  const onSearchInputChange = useCallback((e) => {\r\n    const { value } = e.target;\r\n    setSearchInput(value);\r\n  }, []);\r\n  const onSelectChange = useCallback((e) => {\r\n    const { value } = e.target;\r\n    setWorkTypeFilter(value);\r\n  }, []);\r\n  const getWorkDuration = useCallback(({ exitTime, entranceTime }) => {\r\n    return `\r\n          ${moment\r\n            .duration(\r\n              moment(exitTime === null ? new Date() : exitTime).diff(\r\n                moment(entranceTime)\r\n              )\r\n            )\r\n            .hours()}\r\n          ساعت\r\n          ${moment\r\n            .duration(\r\n              moment(exitTime === null ? new Date() : exitTime).diff(\r\n                moment(entranceTime)\r\n              )\r\n            )\r\n            .minutes()}\r\n          دقیقه\r\n          ${moment\r\n            .duration(\r\n              moment(exitTime === null ? new Date() : exitTime).diff(\r\n                moment(entranceTime)\r\n              )\r\n            )\r\n            .seconds()}\r\n          ثانیه\r\n   `;\r\n  }, []);\r\n  const handleCurrentWorkDuration = useCallback(() => {\r\n    if (activityLog.length > 0) {\r\n      const currentWorkDuration = getWorkDuration({\r\n        exitTime: new Date(),\r\n        entranceTime: activityLog[activityLog.length - 1].entranceTime,\r\n      });\r\n      setCurrentWorkDuration(currentWorkDuration);\r\n    }\r\n  }, [activityLog, getWorkDuration]);\r\n  //life cycle hooks\r\n  useEffect(() => {\r\n    //handle the initial amount of duration\r\n    handleCurrentWorkDuration();\r\n    //set up the timer\r\n    const basicInterval = setInterval(handleCurrentWorkDuration, 1000);\r\n    return () => clearInterval(basicInterval);\r\n  }, [activityLog, handleCurrentWorkDuration]);\r\n  return isAuthenticated ? (\r\n    <div className={styles.container}>\r\n      <div className={styles.innerBox}>\r\n        <div className={styles.header}>\r\n          <TextField\r\n            label=\"جستجو در میان فعالیت ها\"\r\n            value={searchInput}\r\n            onChange={onSearchInputChange}\r\n            type=\"text\"\r\n          />\r\n          <div>\r\n            <InputLabel id=\"demo-simple-select-helper-label\">\r\n              لطفا نوع کار خود را انتخاب کنید\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-helper-label\"\r\n              id=\"demo-simple-select-helper\"\r\n              value={workTypeFilter}\r\n              onChange={onSelectChange}\r\n              name=\"workType\"\r\n              className={styles.select}\r\n            >\r\n              <MenuItem value={WorkTypes.All}>{WorkTypes.All}</MenuItem>\r\n              <MenuItem value={WorkTypes.Remote}>{WorkTypes.Remote}</MenuItem>\r\n              <MenuItem value={WorkTypes.InOffice}>\r\n                {WorkTypes.InOffice}\r\n              </MenuItem>\r\n            </Select>\r\n          </div>\r\n        </div>\r\n        {activityLog.length > 0 ? (\r\n          <div className={styles.tableContainer}>\r\n            <Table aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>نوع</TableCell>\r\n                  <TableCell align=\"right\">زمان ورود</TableCell>\r\n                  <TableCell align=\"right\">زمان خروج</TableCell>\r\n                  <TableCell align=\"right\">مدت زمان کارکرد</TableCell>\r\n                  <TableCell align=\"right\">شرح فعالیت ها</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {activityLog\r\n                  .filter(\r\n                    ({ workDescription, workType }) =>\r\n                      workDescription?.includes(searchInput) &&\r\n                      (workTypeFilter === WorkTypes.All ||\r\n                        workType === workTypeFilter)\r\n                  )\r\n                  .map(\r\n                    ({\r\n                      workType,\r\n                      entranceTime,\r\n                      exitTime,\r\n                      id,\r\n                      workDescription,\r\n                    }) => (\r\n                      <TableRow key={id}>\r\n                        <TableCell component=\"th\" scope=\"row\" align=\"right\">\r\n                          {workType}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {moment(entranceTime).format(\"MMMM Do YYYY, h:mm:ss\")}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {exitTime !== null ? (\r\n                            moment(exitTime).format(\"MMMM Do YYYY, h:mm:ss\")\r\n                          ) : (\r\n                            <span className={styles.red}>\r\n                              هنوز خارج نشده اید\r\n                            </span>\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {exitTime !== null ? (\r\n                            getWorkDuration({ exitTime, entranceTime })\r\n                          ) : (\r\n                            <span className={styles.orange}>\r\n                              {currentWorkDuration}\r\n                            </span>\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">{workDescription}</TableCell>\r\n                      </TableRow>\r\n                    )\r\n                  )}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        ) : (\r\n          <p>فعالیتی وجود ندارد</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <Redirect to=\"/authentication\" />\r\n  );\r\n};\r\n\r\nexport default DetailsPage;\r\n",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":10,"column":3,"nodeType":"60","messageId":"61","endLine":10,"endColumn":11},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},{"ruleId":"58","severity":1,"message":"64","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":14},{"ruleId":"58","severity":1,"message":"65","line":2,"column":26,"nodeType":"60","messageId":"61","endLine":2,"endColumn":36},{"ruleId":"58","severity":1,"message":"66","line":4,"column":10,"nodeType":"60","messageId":"61","endLine":4,"endColumn":23},{"ruleId":"58","severity":1,"message":"67","line":9,"column":3,"nodeType":"60","messageId":"61","endLine":9,"endColumn":19},{"ruleId":"58","severity":1,"message":"68","line":10,"column":3,"nodeType":"60","messageId":"61","endLine":10,"endColumn":25},{"ruleId":"58","severity":1,"message":"69","line":1,"column":42,"nodeType":"60","messageId":"61","endLine":1,"endColumn":51},{"ruleId":"58","severity":1,"message":"64","line":3,"column":10,"nodeType":"60","messageId":"61","endLine":3,"endColumn":14},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar",["70"],["71"],"'Link' is defined but never used.","'useHistory' is defined but never used.","'EntranceShape' is defined but never used.","'BottomNavigation' is defined but never used.","'BottomNavigationAction' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]