[{"D:\\Projects\\code\\attendanceSystem\\src\\index.tsx":"1","D:\\Projects\\code\\attendanceSystem\\src\\reportWebVitals.ts":"2","D:\\Projects\\code\\attendanceSystem\\src\\App.tsx":"3","D:\\Projects\\code\\attendanceSystem\\src\\pages\\authenticationPage\\AuthenticationPage.tsx":"4","D:\\Projects\\code\\attendanceSystem\\src\\pages\\mainPage\\MainPage.tsx":"5","D:\\Projects\\code\\attendanceSystem\\src\\pages\\reportsPage\\ReportsPage.tsx":"6","D:\\Projects\\code\\attendanceSystem\\src\\Router\\PrivateRoute.tsx":"7","D:\\Projects\\code\\attendanceSystem\\src\\Router\\PublicRoute.tsx":"8","D:\\Projects\\code\\attendanceSystem\\src\\components\\authForm\\AuthForm.tsx":"9","D:\\Projects\\code\\attendanceSystem\\src\\utils\\contexts\\AuthContext.ts":"10","D:\\Projects\\code\\attendanceSystem\\src\\utils\\types.ts":"11","D:\\Projects\\code\\attendanceSystem\\src\\Router\\Router.tsx":"12","D:\\Projects\\code\\attendanceSystem\\src\\components\\header\\Header.tsx":"13"},{"size":542,"mtime":1607429374336,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":3632,"mtime":1607336391721,"results":"17","hashOfConfig":"15"},{"size":756,"mtime":1607332034863,"results":"18","hashOfConfig":"15"},{"size":3998,"mtime":1607597328348,"results":"19","hashOfConfig":"15"},{"size":6587,"mtime":1607336852938,"results":"20","hashOfConfig":"15"},{"size":829,"mtime":1607336631748,"results":"21","hashOfConfig":"15"},{"size":755,"mtime":1607336642475,"results":"22","hashOfConfig":"15"},{"size":2937,"mtime":1607336525338,"results":"23","hashOfConfig":"15"},{"size":623,"mtime":1607335037979,"results":"24","hashOfConfig":"15"},{"size":1076,"mtime":1607335802238,"results":"25","hashOfConfig":"15"},{"size":4870,"mtime":1607336696928,"results":"26","hashOfConfig":"15"},{"size":803,"mtime":1607335097382,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"16rfo4g",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\code\\attendanceSystem\\src\\index.tsx",[],["57","58"],"D:\\Projects\\code\\attendanceSystem\\src\\reportWebVitals.ts",[],"D:\\Projects\\code\\attendanceSystem\\src\\App.tsx",["59"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { nanoid } from \"nanoid\";\nimport AuthenticationPage from \"pages/authenticationPage/AuthenticationPage\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n  Redirect,\n  Link,\n} from \"react-router-dom\";\nimport { AuthContext } from \"contexts/AuthContext\";\nimport MainPage, { WorkTypes } from \"pages/mainPage/MainPage\";\nimport { AuthenticationConstants } from \"components/forms/authForm/AuthForm\";\nimport { initialCurrentUserState } from \"contexts/AuthContext\";\nimport DetailsPage from \"pages/reportsPage/ReportsPage\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport {\n  BottomNavigation,\n  BottomNavigationAction,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogActions,\n} from \"@material-ui/core\";\nimport { Avatar } from \"@material-ui/core\";\n//styles\nimport styles from \"./App.module.scss\";\nexport enum WeekDays {\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n}\nexport interface EntranceShape {\n  workType: WorkTypes;\n  workDescription: string;\n}\nexport interface UserShape {\n  name: string;\n  phoneNumber: string;\n\n  activityLog: {\n    id: string;\n    hasEntered: boolean;\n    hasExited: boolean;\n    entranceTime: Date | null;\n    exitTime: Date | null;\n    workType: WorkTypes | null;\n    workDescription: string;\n  }[];\n}\nfunction App() {\n  //state\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [currentUser, setCurrentUser] = useState<UserShape>(\n    initialCurrentUserState\n  );\n  const [value, setValue] = useState(0);\n  const [isDialogVisible, setIsDialogVisible] = useState<boolean>(false);\n  const [\n    isConfirmationDialogVisible,\n    setIsConfirmationDialogVisible,\n  ] = useState<boolean>(false);\n\n  //third party hooks\n  const history = useHistory();\n  //life cycle hooks\n\n  useEffect(() => {\n    // if (isAuthenticated) {\n    switch (value) {\n      case 0: {\n        // history.push(\"/\");\n        break;\n      }\n      case 1: {\n        // history.push(\"/details\");\n        break;\n      }\n    }\n    // }\n  }, [value, history, isAuthenticated]);\n  //callbacks\n  const signUpTheUser = useCallback(\n    ({ name, phoneNumber }: { name: string; phoneNumber: string }) => {\n      setCurrentUser((currentUser) => ({\n        ...currentUser,\n        name,\n        phoneNumber,\n      }));\n      setIsAuthenticated(true);\n    },\n    []\n  );\n  const SubmitEntrance = useCallback(\n    ({ workType }: { workType: WorkTypes }) => {\n      setCurrentUser((currentUser) => ({\n        ...currentUser,\n        activityLog: [\n          ...currentUser.activityLog,\n          {\n            id: nanoid(),\n            hasEntered: true,\n            hasExited: false,\n            entranceTime: new Date(),\n            exitTime: null,\n            workType,\n            workDescription: \"\",\n          },\n        ],\n      }));\n    },\n    []\n  );\n  const SubmitExit = useCallback(\n    ({ workDescription }: { workDescription: string }) => {\n      if (currentUser.activityLog.length > 0) {\n        console.log(\"left\");\n        const now = moment();\n        const lastTime = moment(\n          currentUser.activityLog[currentUser.activityLog.length - 1]\n            .entranceTime\n        );\n        if (!(now.diff(lastTime, \"minute\") > 10)) {\n          setCurrentUser((currentUser) => {\n            const newActivityLog = currentUser.activityLog.map(\n              (activity, index, array) => {\n                return index === array.length - 1\n                  ? {\n                      ...activity,\n                      hasExited: true,\n                      exitTime: new Date(),\n                      workDescription,\n                    }\n                  : activity;\n              }\n            );\n            return {\n              ...currentUser,\n              activityLog: newActivityLog,\n            };\n          });\n        } else {\n          alert(\n            \"خطا!برای ثبت خروج باید از آخرین ورود شما بیش از 10 دقیقه گذشته باشد\"\n          );\n        }\n      }\n    },\n    [currentUser]\n  );\n\n  const handleCancel = useCallback(() => {\n    setIsConfirmationDialogVisible(false);\n  }, []);\n  const handleOk = useCallback(() => {\n    setIsConfirmationDialogVisible(false);\n    localStorage.removeItem(AuthenticationConstants.AuthenticatedUser);\n    setCurrentUser(initialCurrentUserState);\n    setIsAuthenticated(false);\n  }, []);\n  //life cycle hooks\n  useEffect(() => {\n    if (isAuthenticated) {\n      setIsDialogVisible(true);\n    }\n  }, [isAuthenticated]);\n  useEffect(() => {\n    //handle dialog visibility\n    let timeout: NodeJS.Timeout;\n    if (isDialogVisible) {\n      setTimeout(() => {\n        setIsDialogVisible(false);\n      }, 1000);\n    }\n    return () => clearTimeout(timeout);\n  }, [isDialogVisible]);\n  //get the current user from local storage on the initial render\n  useEffect(() => {\n    let localUser = localStorage.getItem(\n      AuthenticationConstants.AuthenticatedUser\n    );\n    if (localUser !== null) {\n      setCurrentUser(JSON.parse(localUser));\n    }\n  }, []);\n  useEffect(() => {\n    if (currentUser.name !== \"\") {\n      localStorage.setItem(\n        AuthenticationConstants.AuthenticatedUser,\n        JSON.stringify(currentUser)\n      );\n    }\n    if (currentUser.activityLog.length > 0) {\n      const lastActivityTime =\n        currentUser.activityLog[currentUser.activityLog.length - 1]\n          .entranceTime;\n      if (lastActivityTime !== null) {\n        console.log(\n          moment(lastActivityTime).format(\"MMMM Do YYYY, h:mm:ss a\"),\n          WeekDays[new Date(lastActivityTime).getDay()]\n        );\n      }\n    }\n  }, [currentUser]);\n  const OnExit = useCallback(() => {\n    setIsConfirmationDialogVisible(true);\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated,\n        currentUser,\n        setIsAuthenticated,\n        signUpTheUser,\n      }}\n    >\n      <Router>\n        <header className={styles.header}>\n          <h1>سامانه حضور و غیاب</h1>\n\n          {currentUser.name !== \"\" ? (\n            <>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                className={styles.button}\n                onClick={OnExit}\n              >\n                خروج از سیستم\n              </Button>\n            </>\n          ) : null}\n        </header>\n        {currentUser.name !== \"\" && (\n          <div className={styles.avatar}>\n            <div>\n              <span>{currentUser.name}</span>\n              <Avatar>{currentUser.name.slice(0, 1).toUpperCase()}</Avatar>\n            </div>\n          </div>\n        )}\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={(props) => <MainPage {...{ SubmitEntrance, SubmitExit }} />}\n          />\n          <Route path=\"/details\" exact component={DetailsPage} />\n          <Route path=\"/authentication\" exact component={AuthenticationPage} />\n        </Switch>\n        {isAuthenticated && (\n          <BottomNavigation\n            value={value}\n            onChange={(event, newValue) => {\n              setValue(newValue);\n            }}\n            showLabels\n          >\n            <BottomNavigationAction\n              component={Link}\n              to=\"/\"\n              label=\"خانه\"\n              icon={<HomeIcon />}\n            />\n            <BottomNavigationAction\n              label=\"لیست گزارش ها\"\n              component={Link}\n              to=\"/details\"\n              icon={<ListAltIcon />}\n            ></BottomNavigationAction>\n          </BottomNavigation>\n        )}\n\n        <Dialog aria-labelledby=\"simple-dialog-title\" open={isDialogVisible}>\n          <DialogTitle id=\"simple-dialog-title\">\n            شما با موفقیت وارد شدید\n          </DialogTitle>\n        </Dialog>\n        <Dialog\n          disableBackdropClick\n          disableEscapeKeyDown\n          maxWidth=\"md\"\n          aria-labelledby=\"confirmation-dialog-title\"\n          open={isConfirmationDialogVisible}\n        >\n          <DialogTitle id=\"confirmation-dialog-title\">\n            در صورت خروج تمام اطلاعات شما پاک خواهد شد . آیا مطمئن هستید؟\n          </DialogTitle>\n          <DialogActions>\n            <Button autoFocus onClick={handleCancel} color=\"primary\">\n              خیر\n            </Button>\n            <Button onClick={handleOk} color=\"primary\">\n              بله\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","D:\\Projects\\code\\attendanceSystem\\src\\pages\\authenticationPage\\AuthenticationPage.tsx",[],"D:\\Projects\\code\\attendanceSystem\\src\\pages\\mainPage\\MainPage.tsx",[],"D:\\Projects\\code\\attendanceSystem\\src\\pages\\reportsPage\\ReportsPage.tsx",["60"],"import { AuthContext } from \"contexts/AuthContext\";\r\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { WorkTypes } from \"pages/mainPage/MainPage\";\r\n//styles\r\nimport styles from \"./DetailsPage.module.scss\";\r\nimport {\r\n  Select,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport { InputLabel, TextField } from \"@material-ui/core\";\r\nimport { MenuItem } from \"@material-ui/core\";\r\nconst DetailsPage = () => {\r\n  //context\r\n  const {\r\n    isAuthenticated,\r\n    currentUser: { activityLog },\r\n  } = useContext(AuthContext);\r\n  //state\r\n  const [searchInput, setSearchInput] = useState<string>(\"\");\r\n  const [workTypeFilter, setWorkTypeFilter] = useState<WorkTypes>(\r\n    WorkTypes.All\r\n  );\r\n  const [currentWorkDuration, setCurrentWorkDuration] = useState<string>(\"\");\r\n  //callbacks\r\n  const onSearchInputChange = useCallback((e) => {\r\n    const { value } = e.target;\r\n    setSearchInput(value);\r\n  }, []);\r\n  const onSelectChange = useCallback((e) => {\r\n    const { value } = e.target;\r\n    setWorkTypeFilter(value);\r\n  }, []);\r\n  const getWorkDuration = useCallback(({ exitTime, entranceTime }) => {\r\n    return `\r\n          ${moment\r\n            .duration(\r\n              moment(exitTime === null ? new Date() : exitTime).diff(\r\n                moment(entranceTime)\r\n              )\r\n            )\r\n            .hours()}\r\n          ساعت\r\n          ${moment\r\n            .duration(\r\n              moment(exitTime === null ? new Date() : exitTime).diff(\r\n                moment(entranceTime)\r\n              )\r\n            )\r\n            .minutes()}\r\n          دقیقه\r\n          ${moment\r\n            .duration(\r\n              moment(exitTime === null ? new Date() : exitTime).diff(\r\n                moment(entranceTime)\r\n              )\r\n            )\r\n            .seconds()}\r\n          ثانیه\r\n   `;\r\n  }, []);\r\n  const handleCurrentWorkDuration = useCallback(() => {\r\n    if (activityLog.length > 0) {\r\n      const currentWorkDuration = getWorkDuration({\r\n        exitTime: new Date(),\r\n        entranceTime: activityLog[activityLog.length - 1].entranceTime,\r\n      });\r\n      setCurrentWorkDuration(currentWorkDuration);\r\n    }\r\n  }, [activityLog, getWorkDuration]);\r\n  //life cycle hooks\r\n  useEffect(() => {\r\n    //handle the initial amount of duration\r\n    handleCurrentWorkDuration();\r\n    //set up the timer\r\n    const basicInterval = setInterval(handleCurrentWorkDuration, 1000);\r\n    return () => clearInterval(basicInterval);\r\n  }, [activityLog, handleCurrentWorkDuration]);\r\n  return isAuthenticated ? (\r\n    <div className={styles.container}>\r\n      <div className={styles.innerBox}>\r\n        <div className={styles.header}>\r\n          <TextField\r\n            label=\"جستجو در میان فعالیت ها\"\r\n            value={searchInput}\r\n            onChange={onSearchInputChange}\r\n            type=\"text\"\r\n          />\r\n          <div>\r\n            <InputLabel id=\"demo-simple-select-helper-label\">\r\n              لطفا نوع کار خود را انتخاب کنید\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-helper-label\"\r\n              id=\"demo-simple-select-helper\"\r\n              value={workTypeFilter}\r\n              onChange={onSelectChange}\r\n              name=\"workType\"\r\n              className={styles.select}\r\n            >\r\n              <MenuItem value={WorkTypes.All}>{WorkTypes.All}</MenuItem>\r\n              <MenuItem value={WorkTypes.Remote}>{WorkTypes.Remote}</MenuItem>\r\n              <MenuItem value={WorkTypes.InOffice}>\r\n                {WorkTypes.InOffice}\r\n              </MenuItem>\r\n            </Select>\r\n          </div>\r\n        </div>\r\n        {activityLog.length > 0 ? (\r\n          <div className={styles.tableContainer}>\r\n            <Table aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>نوع</TableCell>\r\n                  <TableCell align=\"right\">زمان ورود</TableCell>\r\n                  <TableCell align=\"right\">زمان خروج</TableCell>\r\n                  <TableCell align=\"right\">مدت زمان کارکرد</TableCell>\r\n                  <TableCell align=\"right\">شرح فعالیت ها</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {activityLog\r\n                  .filter(\r\n                    ({ workDescription, workType }) =>\r\n                      workDescription?.includes(searchInput) &&\r\n                      (workTypeFilter === WorkTypes.All ||\r\n                        workType === workTypeFilter)\r\n                  )\r\n                  .map(\r\n                    ({\r\n                      workType,\r\n                      entranceTime,\r\n                      exitTime,\r\n                      id,\r\n                      workDescription,\r\n                    }) => (\r\n                      <TableRow key={id}>\r\n                        <TableCell component=\"th\" scope=\"row\" align=\"right\">\r\n                          {workType}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {moment(entranceTime).format(\"MMMM Do YYYY, h:mm:ss\")}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {exitTime !== null ? (\r\n                            moment(exitTime).format(\"MMMM Do YYYY, h:mm:ss\")\r\n                          ) : (\r\n                            <span className={styles.red}>\r\n                              هنوز خارج نشده اید\r\n                            </span>\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {exitTime !== null ? (\r\n                            getWorkDuration({ exitTime, entranceTime })\r\n                          ) : (\r\n                            <span className={styles.orange}>\r\n                              {currentWorkDuration}\r\n                            </span>\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">{workDescription}</TableCell>\r\n                      </TableRow>\r\n                    )\r\n                  )}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        ) : (\r\n          <p>فعالیتی وجود ندارد</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <Redirect to=\"/authentication\" />\r\n  );\r\n};\r\n\r\nexport default DetailsPage;\r\n","D:\\Projects\\code\\attendanceSystem\\src\\Router\\PrivateRoute.tsx",[],"D:\\Projects\\code\\attendanceSystem\\src\\Router\\PublicRoute.tsx",[],"D:\\Projects\\code\\attendanceSystem\\src\\components\\authForm\\AuthForm.tsx",[],"D:\\Projects\\code\\attendanceSystem\\src\\utils\\contexts\\AuthContext.ts",[],"D:\\Projects\\code\\attendanceSystem\\src\\utils\\types.ts",[],"D:\\Projects\\code\\attendanceSystem\\src\\Router\\Router.tsx",[],"D:\\Projects\\code\\attendanceSystem\\src\\components\\header\\Header.tsx",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":10,"column":3,"nodeType":"67","messageId":"68","endLine":10,"endColumn":11},{"ruleId":"65","severity":1,"message":"69","line":3,"column":10,"nodeType":"67","messageId":"68","endLine":3,"endColumn":14},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]