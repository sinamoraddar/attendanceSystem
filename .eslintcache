[{"D:\\Projects\\code\\attendanceSystem\\src\\index.tsx":"1","D:\\Projects\\code\\attendanceSystem\\src\\reportWebVitals.ts":"2","D:\\Projects\\code\\attendanceSystem\\src\\App.tsx":"3","D:\\Projects\\code\\attendanceSystem\\src\\pages\\authenticationPage\\AuthenticationPage.tsx":"4","D:\\Projects\\code\\attendanceSystem\\src\\components\\forms\\loginForm\\LoginForm.tsx":"5","D:\\Projects\\code\\attendanceSystem\\src\\contexts\\AuthContext.ts":"6","D:\\Projects\\code\\attendanceSystem\\src\\pages\\mainPage\\MainPage.tsx":"7","D:\\Projects\\code\\attendanceSystem\\src\\components\\forms\\authForm\\AuthForm.tsx":"8","D:\\Projects\\code\\attendanceSystem\\src\\pages\\reportsPage\\ReportsPage.tsx":"9"},{"size":542,"mtime":1607429374336,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":8722,"mtime":1607325465981,"results":"13","hashOfConfig":"11"},{"size":756,"mtime":1607523729291,"results":"14","hashOfConfig":"11"},{"size":487,"mtime":1607317353356,"results":"15","hashOfConfig":"11"},{"size":615,"mtime":1607411409285,"results":"16","hashOfConfig":"11"},{"size":4274,"mtime":1607584248800,"results":"17","hashOfConfig":"11"},{"size":3172,"mtime":1607583101521,"results":"18","hashOfConfig":"11"},{"size":6678,"mtime":1607325466105,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"16rfo4g",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"22"},"D:\\Projects\\code\\attendanceSystem\\src\\index.tsx",[],["44","45"],"D:\\Projects\\code\\attendanceSystem\\src\\reportWebVitals.ts",[],"D:\\Projects\\code\\attendanceSystem\\src\\App.tsx",["46"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { nanoid } from \"nanoid\";\nimport AuthenticationPage from \"pages/authenticationPage/AuthenticationPage\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n  Redirect,\n  Link,\n} from \"react-router-dom\";\nimport { AuthContext } from \"contexts/AuthContext\";\nimport MainPage, { WorkTypes } from \"pages/mainPage/MainPage\";\nimport { AuthenticationConstants } from \"components/forms/authForm/AuthForm\";\nimport { initialCurrentUserState } from \"contexts/AuthContext\";\nimport DetailsPage from \"pages/reportsPage/ReportsPage\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport {\n  BottomNavigation,\n  BottomNavigationAction,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogActions,\n} from \"@material-ui/core\";\nimport { Avatar } from \"@material-ui/core\";\n//styles\nimport styles from \"./App.module.scss\";\nexport enum WeekDays {\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n}\nexport interface EntranceShape {\n  workType: WorkTypes;\n  workDescription: string;\n}\nexport interface UserShape {\n  name: string;\n  phoneNumber: string;\n\n  activityLog: {\n    id: string;\n    hasEntered: boolean;\n    hasExited: boolean;\n    entranceTime: Date | null;\n    exitTime: Date | null;\n    workType: WorkTypes | null;\n    workDescription: string;\n  }[];\n}\nfunction App() {\n  //state\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [currentUser, setCurrentUser] = useState<UserShape>(\n    initialCurrentUserState\n  );\n  const [value, setValue] = useState(0);\n  const [isDialogVisible, setIsDialogVisible] = useState<boolean>(false);\n  const [\n    isConfirmationDialogVisible,\n    setIsConfirmationDialogVisible,\n  ] = useState<boolean>(false);\n\n  //third party hooks\n  const history = useHistory();\n  //life cycle hooks\n\n  useEffect(() => {\n    // if (isAuthenticated) {\n    switch (value) {\n      case 0: {\n        // history.push(\"/\");\n        break;\n      }\n      case 1: {\n        // history.push(\"/details\");\n        break;\n      }\n    }\n    // }\n  }, [value, history, isAuthenticated]);\n  //callbacks\n  const signUpTheUser = useCallback(\n    ({ name, phoneNumber }: { name: string; phoneNumber: string }) => {\n      setCurrentUser((currentUser) => ({\n        ...currentUser,\n        name,\n        phoneNumber,\n      }));\n      setIsAuthenticated(true);\n    },\n    []\n  );\n  const SubmitEntrance = useCallback(\n    ({ workType }: { workType: WorkTypes }) => {\n      setCurrentUser((currentUser) => ({\n        ...currentUser,\n        activityLog: [\n          ...currentUser.activityLog,\n          {\n            id: nanoid(),\n            hasEntered: true,\n            hasExited: false,\n            entranceTime: new Date(),\n            exitTime: null,\n            workType,\n            workDescription: \"\",\n          },\n        ],\n      }));\n    },\n    []\n  );\n  const SubmitExit = useCallback(\n    ({ workDescription }: { workDescription: string }) => {\n      if (currentUser.activityLog.length > 0) {\n        console.log(\"left\");\n        const now = moment();\n        const lastTime = moment(\n          currentUser.activityLog[currentUser.activityLog.length - 1]\n            .entranceTime\n        );\n        if (!(now.diff(lastTime, \"minute\") > 10)) {\n          setCurrentUser((currentUser) => {\n            const newActivityLog = currentUser.activityLog.map(\n              (activity, index, array) => {\n                return index === array.length - 1\n                  ? {\n                      ...activity,\n                      hasExited: true,\n                      exitTime: new Date(),\n                      workDescription,\n                    }\n                  : activity;\n              }\n            );\n            return {\n              ...currentUser,\n              activityLog: newActivityLog,\n            };\n          });\n        } else {\n          alert(\n            \"خطا!برای ثبت خروج باید از آخرین ورود شما بیش از 10 دقیقه گذشته باشد\"\n          );\n        }\n      }\n    },\n    [currentUser]\n  );\n\n  const handleCancel = useCallback(() => {\n    setIsConfirmationDialogVisible(false);\n  }, []);\n  const handleOk = useCallback(() => {\n    setIsConfirmationDialogVisible(false);\n    localStorage.removeItem(AuthenticationConstants.AuthenticatedUser);\n    setCurrentUser(initialCurrentUserState);\n    setIsAuthenticated(false);\n  }, []);\n  //life cycle hooks\n  useEffect(() => {\n    if (isAuthenticated) {\n      setIsDialogVisible(true);\n    }\n  }, [isAuthenticated]);\n  useEffect(() => {\n    //handle dialog visibility\n    let timeout: NodeJS.Timeout;\n    if (isDialogVisible) {\n      setTimeout(() => {\n        setIsDialogVisible(false);\n      }, 1000);\n    }\n    return () => clearTimeout(timeout);\n  }, [isDialogVisible]);\n  //get the current user from local storage on the initial render\n  useEffect(() => {\n    let localUser = localStorage.getItem(\n      AuthenticationConstants.AuthenticatedUser\n    );\n    if (localUser !== null) {\n      setCurrentUser(JSON.parse(localUser));\n    }\n  }, []);\n  useEffect(() => {\n    if (currentUser.name !== \"\") {\n      localStorage.setItem(\n        AuthenticationConstants.AuthenticatedUser,\n        JSON.stringify(currentUser)\n      );\n    }\n    if (currentUser.activityLog.length > 0) {\n      const lastActivityTime =\n        currentUser.activityLog[currentUser.activityLog.length - 1]\n          .entranceTime;\n      if (lastActivityTime !== null) {\n        console.log(\n          moment(lastActivityTime).format(\"MMMM Do YYYY, h:mm:ss a\"),\n          WeekDays[new Date(lastActivityTime).getDay()]\n        );\n      }\n    }\n  }, [currentUser]);\n  const OnExit = useCallback(() => {\n    setIsConfirmationDialogVisible(true);\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated,\n        currentUser,\n        setIsAuthenticated,\n        signUpTheUser,\n      }}\n    >\n      <Router>\n        <header className={styles.header}>\n          <h1>سامانه حضور و غیاب</h1>\n\n          {currentUser.name !== \"\" ? (\n            <>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                className={styles.button}\n                onClick={OnExit}\n              >\n                خروج از سیستم\n              </Button>\n            </>\n          ) : null}\n        </header>\n        {currentUser.name !== \"\" && (\n          <div className={styles.avatar}>\n            <div>\n              <span>{currentUser.name}</span>\n              <Avatar>{currentUser.name.slice(0, 1).toUpperCase()}</Avatar>\n            </div>\n          </div>\n        )}\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={(props) => <MainPage {...{ SubmitEntrance, SubmitExit }} />}\n          />\n          <Route path=\"/details\" exact component={DetailsPage} />\n          <Route path=\"/authentication\" exact component={AuthenticationPage} />\n        </Switch>\n        {isAuthenticated && (\n          <BottomNavigation\n            value={value}\n            onChange={(event, newValue) => {\n              setValue(newValue);\n            }}\n            showLabels\n          >\n            <BottomNavigationAction\n              component={Link}\n              to=\"/\"\n              label=\"خانه\"\n              icon={<HomeIcon />}\n            />\n            <BottomNavigationAction\n              label=\"لیست گزارش ها\"\n              component={Link}\n              to=\"/details\"\n              icon={<ListAltIcon />}\n            ></BottomNavigationAction>\n          </BottomNavigation>\n        )}\n\n        <Dialog aria-labelledby=\"simple-dialog-title\" open={isDialogVisible}>\n          <DialogTitle id=\"simple-dialog-title\">\n            شما با موفقیت وارد شدید\n          </DialogTitle>\n        </Dialog>\n        <Dialog\n          disableBackdropClick\n          disableEscapeKeyDown\n          maxWidth=\"md\"\n          aria-labelledby=\"confirmation-dialog-title\"\n          open={isConfirmationDialogVisible}\n        >\n          <DialogTitle id=\"confirmation-dialog-title\">\n            در صورت خروج تمام اطلاعات شما پاک خواهد شد . آیا مطمئن هستید؟\n          </DialogTitle>\n          <DialogActions>\n            <Button autoFocus onClick={handleCancel} color=\"primary\">\n              خیر\n            </Button>\n            <Button onClick={handleOk} color=\"primary\">\n              بله\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","D:\\Projects\\code\\attendanceSystem\\src\\pages\\authenticationPage\\AuthenticationPage.tsx",[],"D:\\Projects\\code\\attendanceSystem\\src\\components\\forms\\loginForm\\LoginForm.tsx",[],["47","48"],"D:\\Projects\\code\\attendanceSystem\\src\\contexts\\AuthContext.ts",[],"D:\\Projects\\code\\attendanceSystem\\src\\pages\\mainPage\\MainPage.tsx",["49","50","51","52","53"],"import React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\nimport { AuthContext } from \"contexts/AuthContext\";\r\nimport { EntranceShape, WeekDays } from \"App\";\r\nimport moment from \"moment\";\r\n//styles\r\nimport styles from \"./MainPage.module.scss\";\r\nimport {\r\n  BottomNavigation,\r\n  BottomNavigationAction,\r\n  Button,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n} from \"@material-ui/core\";\r\n\r\nexport enum WorkTypes {\r\n  All = \"همه\",\r\n  InOffice = \"حضوری\",\r\n  Remote = \"ریموت\",\r\n}\r\n\r\nconst MainPage = ({\r\n  SubmitEntrance,\r\n  SubmitExit,\r\n}: {\r\n  SubmitEntrance: ({ workType }: { workType: WorkTypes }) => void;\r\n  SubmitExit: ({ workDescription }: { workDescription: string }) => void;\r\n}) => {\r\n  //context\r\n  const { isAuthenticated, currentUser } = useContext(AuthContext);\r\n  //state\r\n  const [error, setError] = useState<string>(\"\");\r\n  const [workType, setWorkType] = useState<WorkTypes>(WorkTypes.InOffice);\r\n  const [workDescription, setWorkDescription] = useState<string>(\"\");\r\n\r\n  //callbacks\r\n  const onSelectChange = useCallback((e) => {\r\n    const { value } = e.target;\r\n    setWorkType(value);\r\n  }, []);\r\n  const onTextareaChange = useCallback((e) => {\r\n    const { value } = e.target;\r\n    setWorkDescription(value);\r\n  }, []);\r\n  useEffect(() => {\r\n    if (\r\n      new Date().getDay() === WeekDays.Thursday ||\r\n      new Date().getDay() === WeekDays.Friday\r\n    ) {\r\n      setError(\"ثبت ورود و خروج در روز های تعطیل امکان پذیر نیست\");\r\n    }\r\n  }, []);\r\n  return isAuthenticated ? (\r\n    <div className={styles.container}>\r\n      {error.length > 0 ? (\r\n        <h3>{error}</h3>\r\n      ) : (\r\n        <div className={styles.innerBox}>\r\n          {currentUser.activityLog.length > 0 &&\r\n          currentUser.activityLog[currentUser.activityLog.length - 1]\r\n            .hasEntered &&\r\n          currentUser.activityLog[currentUser.activityLog.length - 1]\r\n            .exitTime === null ? (\r\n            <>\r\n              <h3>\r\n                شما در\r\n                <span className={styles.time}>\r\n                  {moment(\r\n                    currentUser.activityLog[currentUser.activityLog.length - 1]\r\n                      .entranceTime\r\n                  ).format(\"HH:mm:ss\")}\r\n                </span>\r\n                وارد شرکت شدید\r\n              </h3>\r\n              <label htmlFor=\"activityDetails\">\r\n                خلاصه فعالیت هاتون رو اینجا وارد کنید\r\n              </label>\r\n\r\n              <textarea\r\n                name=\"activityDetails\"\r\n                id=\"activityDetails\"\r\n                placeholder=\"خلاصه فعالیت ها...\"\r\n                onChange={onTextareaChange}\r\n                value={workDescription}\r\n              ></textarea>\r\n              <Button\r\n                variant={\"contained\"}\r\n                color=\"secondary\"\r\n                onClick={SubmitExit.bind(null, { workDescription })}\r\n              >\r\n                ثبت خروج از شرکت\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <InputLabel id=\"demo-simple-select-helper-label\">\r\n                لطفا نوع کار خود را انتخاب کنید\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-helper-label\"\r\n                id=\"demo-simple-select-helper\"\r\n                value={workType}\r\n                onChange={onSelectChange}\r\n                name=\"workType\"\r\n                className={styles.select}\r\n              >\r\n                <MenuItem value={WorkTypes.Remote}>{WorkTypes.Remote}</MenuItem>\r\n                <MenuItem value={WorkTypes.InOffice}>\r\n                  {WorkTypes.InOffice}\r\n                </MenuItem>\r\n              </Select>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={SubmitEntrance.bind(null, { workType })}\r\n              >\r\n                ثبت ورود به شرکت\r\n              </Button>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  ) : (\r\n    <Redirect to=\"/authentication\" />\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","D:\\Projects\\code\\attendanceSystem\\src\\components\\forms\\authForm\\AuthForm.tsx",["54"],"import React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { AuthContext } from \"contexts/AuthContext\";\r\nimport { Redirect } from \"react-router-dom\";\r\n//styles\r\nimport styles from \"./AuthForm.module.scss\";\r\n//constants\r\nenum InputTypes {\r\n  Name = \"Name\",\r\n  PhoneNumber = \"Phone number\",\r\n}\r\nexport enum AuthenticationConstants {\r\n  AuthenticatedUser = \"AuthenticatedUser\",\r\n  SignUp = \"SignUp\",\r\n  LogIn = \"LogIn\",\r\n}\r\ntype FormTypes = AuthenticationConstants.SignUp | AuthenticationConstants.LogIn;\r\ninterface FormInterface {\r\n  type: FormTypes;\r\n}\r\nconst SignUpForm = ({ type }: FormInterface) => {\r\n  //context\r\n  const {\r\n    currentUser,\r\n    setIsAuthenticated,\r\n    isAuthenticated,\r\n    signUpTheUser,\r\n  } = useContext(AuthContext);\r\n  //state\r\n  const [name, setName] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  //event handlers\r\n  const onSubmit = useCallback(\r\n    (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n\r\n      if (type === AuthenticationConstants.SignUp) {\r\n        signUpTheUser({ name, phoneNumber });\r\n      } else {\r\n        if (phoneNumber === currentUser.phoneNumber) {\r\n          setIsAuthenticated(true);\r\n        } else {\r\n          alert(\"Invalid credentials\");\r\n        }\r\n      }\r\n    },\r\n    [name, phoneNumber, setIsAuthenticated, currentUser, type, signUpTheUser]\r\n  );\r\n\r\n  const onInputChange = useCallback((label, e: any) => {\r\n    const { value } = e.target;\r\n    switch (label) {\r\n      case InputTypes.Name: {\r\n        setName(value);\r\n        break;\r\n      }\r\n      case InputTypes.PhoneNumber: {\r\n        setPhoneNumber(value);\r\n        break;\r\n      }\r\n      default: {\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return isAuthenticated ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <>\r\n      <form onSubmit={onSubmit} className={styles.form}>\r\n        {type === AuthenticationConstants.SignUp ? (\r\n          <>\r\n            <h2>ثبت نام</h2>\r\n            <TextField\r\n              autoFocus\r\n              required\r\n              id=\"standard-required\"\r\n              label={\"نام\"}\r\n              value={name}\r\n              onChange={onInputChange.bind(null, InputTypes.Name)}\r\n              type=\"text\"\r\n            />\r\n            <TextField\r\n              required\r\n              id=\"standard-required\"\r\n              label={\"شماره تلفن\"}\r\n              type=\"number\"\r\n              value={phoneNumber}\r\n              onChange={onInputChange.bind(null, InputTypes.PhoneNumber)}\r\n            />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <h2>ورود</h2>\r\n            <TextField\r\n              required\r\n              id=\"standard-required\"\r\n              label={\"شماره تلفن\"}\r\n              type=\"number\"\r\n              value={phoneNumber}\r\n              autoFocus\r\n              onChange={onInputChange.bind(null, InputTypes.PhoneNumber)}\r\n            />\r\n          </>\r\n        )}\r\n\r\n        <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n          {type}\r\n        </Button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;\r\n","D:\\Projects\\code\\attendanceSystem\\src\\pages\\reportsPage\\ReportsPage.tsx",["55"],"import { AuthContext } from \"contexts/AuthContext\";\r\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { WorkTypes } from \"pages/mainPage/MainPage\";\r\n//styles\r\nimport styles from \"./DetailsPage.module.scss\";\r\nimport {\r\n  Select,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport { InputLabel, TextField } from \"@material-ui/core\";\r\nimport { MenuItem } from \"@material-ui/core\";\r\nconst DetailsPage = () => {\r\n  //context\r\n  const {\r\n    isAuthenticated,\r\n    currentUser: { activityLog },\r\n  } = useContext(AuthContext);\r\n  //state\r\n  const [searchInput, setSearchInput] = useState<string>(\"\");\r\n  const [workTypeFilter, setWorkTypeFilter] = useState<WorkTypes>(\r\n    WorkTypes.All\r\n  );\r\n  const [currentWorkDuration, setCurrentWorkDuration] = useState<string>(\"\");\r\n  //callbacks\r\n  const onSearchInputChange = useCallback((e) => {\r\n    const { value } = e.target;\r\n    setSearchInput(value);\r\n  }, []);\r\n  const onSelectChange = useCallback((e) => {\r\n    const { value } = e.target;\r\n    setWorkTypeFilter(value);\r\n  }, []);\r\n  const getWorkDuration = useCallback(({ exitTime, entranceTime }) => {\r\n    return `\r\n          ${moment\r\n            .duration(\r\n              moment(exitTime === null ? new Date() : exitTime).diff(\r\n                moment(entranceTime)\r\n              )\r\n            )\r\n            .hours()}\r\n          ساعت\r\n          ${moment\r\n            .duration(\r\n              moment(exitTime === null ? new Date() : exitTime).diff(\r\n                moment(entranceTime)\r\n              )\r\n            )\r\n            .minutes()}\r\n          دقیقه\r\n          ${moment\r\n            .duration(\r\n              moment(exitTime === null ? new Date() : exitTime).diff(\r\n                moment(entranceTime)\r\n              )\r\n            )\r\n            .seconds()}\r\n          ثانیه\r\n   `;\r\n  }, []);\r\n  const handleCurrentWorkDuration = useCallback(() => {\r\n    if (activityLog.length > 0) {\r\n      const currentWorkDuration = getWorkDuration({\r\n        exitTime: new Date(),\r\n        entranceTime: activityLog[activityLog.length - 1].entranceTime,\r\n      });\r\n      setCurrentWorkDuration(currentWorkDuration);\r\n    }\r\n  }, [activityLog, getWorkDuration]);\r\n  //life cycle hooks\r\n  useEffect(() => {\r\n    //handle the initial amount of duration\r\n    handleCurrentWorkDuration();\r\n    //set up the timer\r\n    const basicInterval = setInterval(handleCurrentWorkDuration, 1000);\r\n    return () => clearInterval(basicInterval);\r\n  }, [activityLog, handleCurrentWorkDuration]);\r\n  return isAuthenticated ? (\r\n    <div className={styles.container}>\r\n      <div className={styles.innerBox}>\r\n        <div className={styles.header}>\r\n          <TextField\r\n            label=\"جستجو در میان فعالیت ها\"\r\n            value={searchInput}\r\n            onChange={onSearchInputChange}\r\n            type=\"text\"\r\n          />\r\n          <div>\r\n            <InputLabel id=\"demo-simple-select-helper-label\">\r\n              لطفا نوع کار خود را انتخاب کنید\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-helper-label\"\r\n              id=\"demo-simple-select-helper\"\r\n              value={workTypeFilter}\r\n              onChange={onSelectChange}\r\n              name=\"workType\"\r\n              className={styles.select}\r\n            >\r\n              <MenuItem value={WorkTypes.All}>{WorkTypes.All}</MenuItem>\r\n              <MenuItem value={WorkTypes.Remote}>{WorkTypes.Remote}</MenuItem>\r\n              <MenuItem value={WorkTypes.InOffice}>\r\n                {WorkTypes.InOffice}\r\n              </MenuItem>\r\n            </Select>\r\n          </div>\r\n        </div>\r\n        {activityLog.length > 0 ? (\r\n          <div className={styles.tableContainer}>\r\n            <Table aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>نوع</TableCell>\r\n                  <TableCell align=\"right\">زمان ورود</TableCell>\r\n                  <TableCell align=\"right\">زمان خروج</TableCell>\r\n                  <TableCell align=\"right\">مدت زمان کارکرد</TableCell>\r\n                  <TableCell align=\"right\">شرح فعالیت ها</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {activityLog\r\n                  .filter(\r\n                    ({ workDescription, workType }) =>\r\n                      workDescription?.includes(searchInput) &&\r\n                      (workTypeFilter === WorkTypes.All ||\r\n                        workType === workTypeFilter)\r\n                  )\r\n                  .map(\r\n                    ({\r\n                      workType,\r\n                      entranceTime,\r\n                      exitTime,\r\n                      id,\r\n                      workDescription,\r\n                    }) => (\r\n                      <TableRow key={id}>\r\n                        <TableCell component=\"th\" scope=\"row\" align=\"right\">\r\n                          {workType}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {moment(entranceTime).format(\"MMMM Do YYYY, h:mm:ss\")}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {exitTime !== null ? (\r\n                            moment(exitTime).format(\"MMMM Do YYYY, h:mm:ss\")\r\n                          ) : (\r\n                            <span className={styles.red}>\r\n                              هنوز خارج نشده اید\r\n                            </span>\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {exitTime !== null ? (\r\n                            getWorkDuration({ exitTime, entranceTime })\r\n                          ) : (\r\n                            <span className={styles.orange}>\r\n                              {currentWorkDuration}\r\n                            </span>\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">{workDescription}</TableCell>\r\n                      </TableRow>\r\n                    )\r\n                  )}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        ) : (\r\n          <p>فعالیتی وجود ندارد</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <Redirect to=\"/authentication\" />\r\n  );\r\n};\r\n\r\nexport default DetailsPage;\r\n",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":10,"column":3,"nodeType":"62","messageId":"63","endLine":10,"endColumn":11},{"ruleId":"56","replacedBy":"64"},{"ruleId":"58","replacedBy":"65"},{"ruleId":"60","severity":1,"message":"66","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":14},{"ruleId":"60","severity":1,"message":"67","line":2,"column":26,"nodeType":"62","messageId":"63","endLine":2,"endColumn":36},{"ruleId":"60","severity":1,"message":"68","line":4,"column":10,"nodeType":"62","messageId":"63","endLine":4,"endColumn":23},{"ruleId":"60","severity":1,"message":"69","line":9,"column":3,"nodeType":"62","messageId":"63","endLine":9,"endColumn":19},{"ruleId":"60","severity":1,"message":"70","line":10,"column":3,"nodeType":"62","messageId":"63","endLine":10,"endColumn":25},{"ruleId":"60","severity":1,"message":"71","line":1,"column":42,"nodeType":"62","messageId":"63","endLine":1,"endColumn":51},{"ruleId":"60","severity":1,"message":"66","line":3,"column":10,"nodeType":"62","messageId":"63","endLine":3,"endColumn":14},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar",["72"],["73"],"'Link' is defined but never used.","'useHistory' is defined but never used.","'EntranceShape' is defined but never used.","'BottomNavigation' is defined but never used.","'BottomNavigationAction' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]